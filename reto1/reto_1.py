## ----------------------------------------------------------------
## Se pueden usar los sigientes usuarios
## dfilipputti0
## lorviss1
## htrownson2
## mmatevushev3
## fpigott4
## -----------------------------------------------------------------
# -*- coding: utf-8 -*-
"""reto_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nxqol_cPmC-Fnn8lMyOOgMoed4gL93q0

#Main Code
"""

from os import PRIO_USER
import json

#filePath = "/content/MOCK_DATA.json"

def readJsonData():
  filePath = "./content/MOCK_DATA.json"
  with open(filePath,"r") as json_file:
    data = json.load(json_file)
  return data

def writeJsonData(data):
  filePath = "./content/MOCK_DATA.json"
  with open(filePath,"w") as json_out_file:
    json.dump(data,json_out_file)

def createJsonData():
  pass

def getAllElements():
  data = readJsonData()
  return data

def getElement(element):
  data = readJsonData()
  return data[element]

def updateAllElements(UpdateData):
  writeJsonData(UpdateData)

def updateElement(UpdateData):
  data = readJsonData()
  data[UpdateData["name"]] = UpdateData
  writeJsonData(data)

def deleteJsonData():
  pass

class UserClass:
  def __init__(self,user):
    try:
      data = getElement(user)
      self.username = data["name"]
      self.password = data["password"]
      self.available = data["available"]
      self.attempts = data["attempts"]
    except Exception as e:
      raise KeyError("Error: El usuario {} no registra en bases".format(str(e)))

  def validateCredetial(self,password):
    if self.attempts > 0:
      return password == self.password
    else:
      raise ValueError("El usuario se encuentra bloqueado")

  def lostAnAttempt(self):
    self.attempts = self.attempts - 1
    self.updateData()
    print("Try again, you has {} attempts".format(self.attempts))

  def restoreAttempts(self):
    self.attempts = 3
    self.updateData()

  def depositMoney(self, movement):
    self.available = self.available + movement
    self.updateData

  def withdrawMoney(self, movement):
    if movement <= self.available:
      self.available = self.available - movement
      self.updateData
    else:
      raise ValueError("No cuenta con recursos suficientes para esta transacción")

  def viewMoney(self):
    print("Tiene en su cuenta la cantidad de ${}.".format(self.available))

  def transferMoney(self, movement, transferUser):
    self.withdrawMoney(movement)
    transferUser.depositMoney(movement)

  def updateData(self):
    data = {
        "name": self.username,
        "password": self.password,
        "available": self.available,
        "attempts": self.attempts
    }
    updateElement(data)

from logging import exception
import sys

def Login():
  LoginUser = input("ingrese el usuario:      ")
  LoginPassword = input("ingrese la contraseña:   ")

  try:
    MainUser = UserClass(LoginUser)
  except Exception as e:
    print("Error:",str(e))
    MainUser = Login()

  if MainUser.validateCredetial(LoginPassword):
    MainUser.restoreAttempts()
    return MainUser
  else:
    MainUser.lostAnAttempt()

def header(title = "esto es un header"):
  lenghtHeader = len(title)*3
  print("="*lenghtHeader)
  print("+"*lenghtHeader)
  print("+"*len(title)+title.upper()+"+"*len(title))
  print("+"*lenghtHeader)
  print("="*lenghtHeader)

def Menu(MainUser):
  print("Seleccione una de las siguientes opcciones:")
  print("[1] deposito, [2] retiro, [3] consulta, [4] transferencia, [5] cerrar sesión")
  option = input("")
  if option == "1":
    header("deposito")
    print("¿Cuanto desea depositar?")
    MainUser.depositMoney(int(input("")))
    MainUser.viewMoney()


  if option == "2":
    header("retiro")
    print("¿Cuanto desea retirar?")
    try:
      MainUser.withdrawMoney(int(input("")))
      MainUser.viewMoney()
    except Exception as e:
      print("Error: ",str(e))

  if option == "3":
    header("consulta")
    MainUser.viewMoney()

  if option == "4":
    header("transferencia")
    try:
      print("¿Por favor indique a que usuario se debe depositar?")
      AuxUser = UserClass(input(""))
      print("¿Cuanto desea depositar?")
      deposit = int(input(""))
      MainUser.transferMoney(deposit, AuxUser)
      MainUser.viewMoney()
      print("aux")
      AuxUser.viewMoney()
    except Exception as e:
      print("Error: ",str(e))

  if option == "5":
    header("cerrando sesión")
    header("muchas gracias por la visita")
    raise KeyboardInterrupt()

  if int(option) <1 and int(option) >5:
    print("La opcion seleccionada no existe")

  Menu(MainUser)

if __name__ == "__main__":
  try:
    MainUser = Login()
    header("Bienvenido a su sistema bancario")
    Menu(MainUser)
  except Exception as e:
    print("Error:",str(e))
  except KeyboardInterrupt:
    pass
